package main

import "fmt"

// 这里定义了实现两个方法的接口
// 注意,接口关注的是方法,也就是接口能做什么,就好比给了一个带缺口的包装盒,我只知道缺口的形状是什么,然后我插入对应的接口,这个盒子就会做一些事情
// 也就是说,接口不关心传入的数据类型,但是关心方法,如果传入的数据类型,没有完全实现这个接口就会报错
type 一些东西的接口 interface {
	简单显示()
	使用指针显示()
}

type 一些东西的接口只有一个方法的时候 interface {
	简单显示()
}

type 一些东西 struct {
	name string
	age  int
}

func (r 一些东西) 简单显示() {
	fmt.Printf("name == %s , age == %d \n", r.name, r.age)
}

func (r *一些东西) 使用指针显示() {
	fmt.Printf("name == %s , age == %d \n", r.name, r.age)
	r.name = "ming-cloud"
	r.age = 21

}

func main() {

	// 结合之前方法的指针部分,可以知道,golang会只能的转化指针
	一些东西的实例 := 一些东西{"ming", 19}
	fmt.Printf("这个创建的实例的类型是 %T\n", 一些东西的实例) //这里是值的类型
	一些东西的实例.使用指针显示()                        // 这里等价于 (&一些东西的实例).使用指针显示()
	// 继续讨论,这里把实例的指针传递给了 用指针显示 这个函数的形式参数,所以,在用 指针显示 这个函数之中,是可以实现对外部数值的修改的
	fmt.Printf("经过第第一次函数修改后 >> %v\n", 一些东西的实例) //经过第第一次函数修改后 >> {ming-cloud 21}
	// 据徐讨论,接口是可以存储对应的数值的,所以理论上来说,是可以把实现了接口方法的数据类型传入给接口的
	var 一些东西的接口的实例 一些东西的接口
	// 上面初始化一个接口实例
	/* 	一些东西的接口的实例 = 一些东西的实例
	   	上面的代码会报错 :
	   	不可以把 一些东西的实例 传入 一些东西的接口的实例 接口,因为 有 使用指针显示 这个函数是要求指针的,也就是说,
	   	在这里go 语言不会做一个类型的转化

	   	如果传入的是指针
	*/
	一些东西的接口的实例 = &一些东西的实例
	// 上面的代码是可以的,成功通过指针调用对应的值/指针的方法
	一些东西的接口的实例.使用指针显示()
	一些东西的接口的实例.简单显示()

	// 那么为什么传入值就说 " 有 使用指针显示 这个函数是要求指针的 " 然后就不给调用了呢?是真的不可以还是因为不符合用户预期所以才设计成这样呢?
	// 首先这些指针操作都是由 go lang 进行操作的,所以设计者需要尽量保证代码要符合用户的想法,不是说值就不可以调用值类型指针的方法了
	// 是可以的,就看下面

	var 实例 一些东西 = 一些东西的实例

	实例.使用指针显示()
	实例.简单显示()
	// 上面两个是可以成功调用两个东西的,所以说,从方法的角度来说,是没问题的,那么就只能是设计的问题

	// 关于指针的自动转化来说
	// 实例 是值的类型,然后像调用指针方法
	// 那么就相当于可以写出方法
	/*
		func (r 一些东西) 指针方法()  {
			retrun (&r).指针方法()
		}
		// ! 那么重点来了,众所周知,r 这里来说是函数形式参数,然后在这里进行一个取指针操作,去到的指针也只是这个形式参数的指针
	*/
	// 也就是说经过上面的自动操作,可能会让多态失效,因为本身传入的是值的类型,然后有指针的方法,又有值的方法,但是好巧不巧,要是调用接口的另一个方法
	// 可能又会让调用的函数失效(上面传入的为值,但是调用的是指针方法的时候),所以为了保证都能让多态的正确,就干脆拒绝值传入接口中
	// 但是指针的话,不管是用副本传入也好,还是用引用语义来说,都是可以实现函数的目的,因为可以找到源参数的指针位置

	// 如果说,某个接口,只有一个方法,不管是传入指针还是传入值,,然后不会存在一个方法是值/另一个是值的指针的时候,那么这个时候
	// 接口就只要关注一个方法,然后根据对应传入的方法进行取指针或者解开指针就好了
	// 对应上面的解释其实就和 某类型的指针和 某类型的 一种多态是一样的了,因为只有一个东西接口要关注的了,这里和 "选择器" 有点像

	var 一个方法的接口实例 一些东西的接口只有一个方法的时候 
	一个方法的接口实例 = 实例
	一个方法的接口实例.简单显示()
	
	一个方法的接口实例 = &实例
	一个方法的接口实例.简单显示()
}
